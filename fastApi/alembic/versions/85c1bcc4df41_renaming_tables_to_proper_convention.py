"""Renaming tables to proper convention

Revision ID: 85c1bcc4df41
Revises: a88c89da7f18
Create Date: 2025-03-22 18:02:02.624589

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '85c1bcc4df41'
down_revision: Union[str, None] = 'a88c89da7f18'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('card',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('front', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('back', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('card_identity', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('node_version_id', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('id', name='card_pkey')
    )
    op.create_table('card_identity',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('set_id', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('id', name='card_identity_pkey')
    )
    op.create_table('deku_user',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('dark_mode', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name='deku_user_pkey')
    )
    op.create_table('node',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.Uuid(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('public_set', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('icon_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id', name='node_pkey')
    )
    op.create_table('node_version',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('version_display_num', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('version_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('version_seq_num', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id', name='node_version_pkey')
    )
    op.create_table('public_node',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('current_version', sa.Uuid(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('node_id', sa.Uuid(), nullable=True),
    sa.PrimaryKeyConstraint('id', name='public_node_pkey')
    )
    op.create_table('set',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('set_identity_id', sa.Uuid(), nullable=False),
    sa.Column('parent_set_id', sa.Uuid(), nullable=False),
    sa.Column('node_version_id', sa.Uuid(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_by', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prerequisites', sa.JSON(), nullable=True),
    sa.Column('x_relative_node', sa.Float(), nullable=False),
    sa.Column('y_relative_node', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id', name='set_pkey')
    )
    op.create_table('set_identity',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('node_id', sa.Uuid(), nullable=False),
    sa.PrimaryKeyConstraint('id', name='set_identity_pkey')
    )
    op.create_table('user_card',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('card_identity_id', sa.Uuid(), nullable=False),
    sa.Column('times_correct', sa.Integer(), nullable=False),
    sa.Column('user_set_id', sa.Uuid(), nullable=False),
    sa.Column('available', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('last_shown_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('user_id', 'card_identity_id', name='user_card_pkey')
    )
    op.create_table('user_node',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('node_id', sa.Uuid(), nullable=True),
    sa.Column('parent_node_id', sa.Uuid(), nullable=True),
    sa.Column('node_version_id', sa.Uuid(), nullable=True),
    sa.Column('node_enabled', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_node_pkey')
    )
    op.create_table('user_set',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('set_identity_id', sa.Uuid(), nullable=False),
    sa.Column('user_node_id', sa.Uuid(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('user_id', 'set_identity_id', name='user_set_pkey'),
    comment='Table to describe relationship between users and cardSets.'
    )
    op.execute('DROP TABLE "Nodes" CASCADE')
    op.execute('DROP TABLE "Cards" CASCADE')
    op.execute('DROP TABLE "Sets" CASCADE')
    op.execute('DROP TABLE "UserSets" CASCADE')
    op.execute('DROP TABLE "UserNodes" CASCADE')
    op.execute('DROP TABLE "NodeVersion" CASCADE')
    op.execute('DROP TABLE "SetIdentities" CASCADE')
    op.execute('DROP TABLE "CardIdentities" CASCADE')
    op.execute('DROP TABLE "PublicNode" CASCADE')
    op.execute('DROP TABLE "UserCards" CASCADE')
    op.execute('DROP TABLE "DekuUsers" CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('DekuUsers',
    sa.Column('dark_mode', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('auth.uid()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['auth.users.id'], name='Users_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('UserCards',
    sa.Column('user_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('card_identity_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('last_shown_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('times_correct', sa.INTEGER(), server_default=sa.text("'0'::smallint"), autoincrement=False, nullable=False),
    sa.Column('available', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('user_set_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('user_id', 'card_identity_id', name='UserCards_pkey')
    )
    op.create_table('PublicNode',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('node_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('current_version', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['current_version'], ['NodeVersion.id'], name='fk_publicnode_current_version_nodeversion_id'),
    sa.ForeignKeyConstraint(['node_id'], ['Nodes.id'], name='fk_publicnode_node_id_nodes_id'),
    sa.PrimaryKeyConstraint('id', name='PublicNode_pkey')
    )
    op.create_table('CardIdentities',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('set_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='CardIdentities_pkey')
    )
    op.create_table('SetIdentities',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['Nodes.id'], name='fk_setidentities_node_id_nodes_id'),
    sa.PrimaryKeyConstraint('id', name='SetIdentity_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('NodeVersion',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('version_display_num', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('version_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('version_seq_num', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='NodeVersion_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('UserNodes',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), server_default=sa.text('auth.uid()'), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('parent_node_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('node_version_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('node_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['Nodes.id'], name='fk_usernodes_node_id_nodes_id'),
    sa.ForeignKeyConstraint(['node_version_id'], ['NodeVersion.id'], name='fk_usernodes_node_version_id_nodeversion_id'),
    sa.ForeignKeyConstraint(['parent_node_id'], ['Nodes.id'], name='fk_usernodes_parent_node_id_nodes_id'),
    sa.ForeignKeyConstraint(['user_id'], ['DekuUsers.id'], name='fk_usernodes_user_id_dekuusers_id'),
    sa.PrimaryKeyConstraint('id', name='UserNodes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('UserSets',
    sa.Column('user_id', sa.UUID(), server_default=sa.text('auth.uid()'), autoincrement=False, nullable=False),
    sa.Column('set_identity_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('user_node_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['set_identity_id'], ['Sets.id'], name='fk_usersets_set_identity_id_sets_id'),
    sa.ForeignKeyConstraint(['user_id'], ['DekuUsers.id'], name='fk_usersets_user_id_dekuusers_id'),
    sa.ForeignKeyConstraint(['user_node_id'], ['UserNodes.id'], name='fk_usersets_user_node_id_usernodes_id'),
    sa.PrimaryKeyConstraint('user_id', 'set_identity_id', name='UserSets_pkey'),
    comment='Table to describe relationship between users and cardSets.'
    )
    op.create_table('Sets',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), server_default=sa.text('auth.uid()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('prerequisites', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('node_version_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=True),
    sa.Column('set_identity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('parent_set_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('x_relative_node', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('y_relative_node', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['node_version_id'], ['NodeVersion.id'], name='fk_sets_node_version_id_nodeversion_id'),
    sa.ForeignKeyConstraint(['parent_set_id'], ['Sets.id'], name='fk_sets_parent_set_id_sets_id'),
    sa.ForeignKeyConstraint(['set_identity_id'], ['SetIdentities.id'], name='fk_sets_set_identity_id_setidentities_id'),
    sa.PrimaryKeyConstraint('id', name='CardSets_pkey')
    )
    op.create_table('Cards',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('front', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('back', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('card_identity', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('node_version_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Card_pkey')
    )
    op.create_table('Nodes',
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), server_default=sa.text('auth.uid()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('public_set', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('icon_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['DekuUsers.id'], name='fk_nodes_created_by_dekuusers_id'),
    sa.PrimaryKeyConstraint('id', name='Node_pkey')
    )
    op.drop_table('user_set')
    op.drop_table('user_node')
    op.drop_table('user_card')
    op.drop_table('set_identity')
    op.drop_table('set')
    op.drop_table('public_node')
    op.drop_table('node_version')
    op.drop_table('node')
    op.drop_table('deku_user')
    op.drop_table('card_identity')
    op.drop_table('card')
    # ### end Alembic commands ###
