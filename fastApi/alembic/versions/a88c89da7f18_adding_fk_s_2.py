"""Adding FK's 2

Revision ID: a88c89da7f18
Revises: 94c2b044c071
Create Date: 2025-03-22 17:05:50.408206

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'a88c89da7f18'
down_revision: Union[str, None] = '94c2b044c071'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key(
        constraint_name="fk_nodes_created_by_dekuusers_id",
        source_table="Nodes",
        referent_table="DekuUsers",
        local_cols=["created_by"],
        remote_cols=["id"]
    )

    # PublicNode: current_version -> NodeVersion.id
    op.create_foreign_key(
        constraint_name="fk_publicnode_current_version_nodeversion_id",
        source_table="PublicNode",
        referent_table="NodeVersion",
        local_cols=["current_version"],
        remote_cols=["id"]
    )

    # PublicNode: node_id -> Nodes.id
    op.create_foreign_key(
        constraint_name="fk_publicnode_node_id_nodes_id",
        source_table="PublicNode",
        referent_table="Nodes",
        local_cols=["node_id"],
        remote_cols=["id"]
    )

    # SetIdentities: node_id -> Nodes.id
    op.create_foreign_key(
        constraint_name="fk_setidentities_node_id_nodes_id",
        source_table="SetIdentities",
        referent_table="Nodes",
        local_cols=["node_id"],
        remote_cols=["id"]
    )

    # Sets: set_identity_id -> SetIdentities.id
    op.create_foreign_key(
        constraint_name="fk_sets_set_identity_id_setidentities_id",
        source_table="Sets",
        referent_table="SetIdentities",
        local_cols=["set_identity_id"],
        remote_cols=["id"]
    )

    # Sets: parent_set_id -> Sets.id
    op.create_foreign_key(
        constraint_name="fk_sets_parent_set_id_sets_id",
        source_table="Sets",
        referent_table="Sets",
        local_cols=["parent_set_id"],
        remote_cols=["id"]
    )

    # Sets: node_version_id -> NodeVersion.id
    op.create_foreign_key(
        constraint_name="fk_sets_node_version_id_nodeversion_id",
        source_table="Sets",
        referent_table="NodeVersion",
        local_cols=["node_version_id"],
        remote_cols=["id"]
    )

    # UserNodes: user_id -> DekuUsers.id
    op.create_foreign_key(
        constraint_name="fk_usernodes_user_id_dekuusers_id",
        source_table="UserNodes",
        referent_table="DekuUsers",
        local_cols=["user_id"],
        remote_cols=["id"]
    )

    # UserNodes: node_id -> Nodes.id
    op.create_foreign_key(
        constraint_name="fk_usernodes_node_id_nodes_id",
        source_table="UserNodes",
        referent_table="Nodes",
        local_cols=["node_id"],
        remote_cols=["id"]
    )

    # UserNodes: parent_node_id -> Nodes.id
    op.create_foreign_key(
        constraint_name="fk_usernodes_parent_node_id_nodes_id",
        source_table="UserNodes",
        referent_table="Nodes",
        local_cols=["parent_node_id"],
        remote_cols=["id"]
    )

    # UserNodes: node_version_id -> NodeVersion.id
    op.create_foreign_key(
        constraint_name="fk_usernodes_node_version_id_nodeversion_id",
        source_table="UserNodes",
        referent_table="NodeVersion",
        local_cols=["node_version_id"],
        remote_cols=["id"]
    )

    # UserSets: user_id -> DekuUsers.id
    op.create_foreign_key(
        constraint_name="fk_usersets_user_id_dekuusers_id",
        source_table="UserSets",
        referent_table="DekuUsers",
        local_cols=["user_id"],
        remote_cols=["id"]
    )

    # UserSets: set_identity_id -> Sets.id
    op.create_foreign_key(
        constraint_name="fk_usersets_set_identity_id_sets_id",
        source_table="UserSets",
        referent_table="Sets",
        local_cols=["set_identity_id"],
        remote_cols=["id"]
    )

    # UserSets: user_node_id -> UserNodes.id
    op.create_foreign_key(
        constraint_name="fk_usersets_user_node_id_usernodes_id",
        source_table="UserSets",
        referent_table="UserNodes",
        local_cols=["user_node_id"],
        remote_cols=["id"]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("fk_usersets_user_node_id_usernodes_id", "UserSets", type_="foreignkey")
    op.drop_constraint("fk_usersets_set_identity_id_sets_id", "UserSets", type_="foreignkey")
    op.drop_constraint("fk_usersets_user_id_dekuusers_id", "UserSets", type_="foreignkey")
    op.drop_constraint("fk_usernodes_node_version_id_nodeversion_id", "UserNodes", type_="foreignkey")
    op.drop_constraint("fk_usernodes_parent_node_id_nodes_id", "UserNodes", type_="foreignkey")
    op.drop_constraint("fk_usernodes_node_id_nodes_id", "UserNodes", type_="foreignkey")
    op.drop_constraint("fk_usernodes_user_id_dekuusers_id", "UserNodes", type_="foreignkey")
    op.drop_constraint("fk_sets_node_version_id_nodeversion_id", "Sets", type_="foreignkey")
    op.drop_constraint("fk_sets_parent_set_id_sets_id", "Sets", type_="foreignkey")
    op.drop_constraint("fk_sets_set_identity_id_setidentities_id", "Sets", type_="foreignkey")
    op.drop_constraint("fk_setidentities_node_id_nodes_id", "SetIdentities", type_="foreignkey")
    op.drop_constraint("fk_publicnode_node_id_nodes_id", "PublicNode", type_="foreignkey")
    op.drop_constraint("fk_publicnode_current_version_nodeversion_id", "PublicNode", type_="foreignkey")
    op.drop_constraint("fk_nodes_created_by_dekuusers_id", "Nodes", type_="foreignkey")
    # ### end Alembic commands ###
